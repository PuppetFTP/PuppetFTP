// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "ServerConfigHandler.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



ServerConfigHandler_ptr ServerConfigHandler_Helper::_nil() {
  return ::ServerConfigHandler::_nil();
}

::CORBA::Boolean ServerConfigHandler_Helper::is_nil(::ServerConfigHandler_ptr p) {
  return ::CORBA::is_nil(p);

}

void ServerConfigHandler_Helper::release(::ServerConfigHandler_ptr p) {
  ::CORBA::release(p);
}

void ServerConfigHandler_Helper::marshalObjRef(::ServerConfigHandler_ptr obj, cdrStream& s) {
  ::ServerConfigHandler::_marshalObjRef(obj, s);
}

ServerConfigHandler_ptr ServerConfigHandler_Helper::unmarshalObjRef(cdrStream& s) {
  return ::ServerConfigHandler::_unmarshalObjRef(s);
}

void ServerConfigHandler_Helper::duplicate(::ServerConfigHandler_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

ServerConfigHandler_ptr
ServerConfigHandler::_duplicate(::ServerConfigHandler_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

ServerConfigHandler_ptr
ServerConfigHandler::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


ServerConfigHandler_ptr
ServerConfigHandler::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

ServerConfigHandler_ptr
ServerConfigHandler::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ServerConfigHandler _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ServerConfigHandler* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ServerConfigHandler;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* ServerConfigHandler::_PD_repoId = "IDL:ServerConfigHandler:1.0";


_objref_ServerConfigHandler::~_objref_ServerConfigHandler() {
  
}


_objref_ServerConfigHandler::_objref_ServerConfigHandler(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::ServerConfigHandler::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
_objref_ServerConfigHandler::_ptrToObjRef(const char* id)
{
  if( id == ::ServerConfigHandler::_PD_repoId )
    return (::ServerConfigHandler_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::ServerConfigHandler::_PD_repoId) )
    return (::ServerConfigHandler_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cstring
class _0RL_cd_ae81456844cbbeb5_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ae81456844cbbeb5_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_ae81456844cbbeb5_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_ae81456844cbbeb5_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_ae81456844cbbeb5_00000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_ae81456844cbbeb5_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_ae81456844cbbeb5_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_ae81456844cbbeb5_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ae81456844cbbeb5_00000000* tcd = (_0RL_cd_ae81456844cbbeb5_00000000*)cd;
  _impl_ServerConfigHandler* impl = (_impl_ServerConfigHandler*) svnt->_ptrToInterface(ServerConfigHandler::_PD_repoId);
  tcd->result = impl->loadPlugin(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean _objref_ServerConfigHandler::loadPlugin(const char* pluginId, const char* pluginName)
{
  _0RL_cd_ae81456844cbbeb5_00000000 _call_desc(_0RL_lcfn_ae81456844cbbeb5_10000000, "loadPlugin", 11);
  _call_desc.arg_0 = pluginId;
  _call_desc.arg_1 = pluginName;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring
class _0RL_cd_ae81456844cbbeb5_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ae81456844cbbeb5_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_ae81456844cbbeb5_20000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_ae81456844cbbeb5_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_ae81456844cbbeb5_20000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_ae81456844cbbeb5_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_ae81456844cbbeb5_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_ae81456844cbbeb5_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ae81456844cbbeb5_20000000* tcd = (_0RL_cd_ae81456844cbbeb5_20000000*)cd;
  _impl_ServerConfigHandler* impl = (_impl_ServerConfigHandler*) svnt->_ptrToInterface(ServerConfigHandler::_PD_repoId);
  tcd->result = impl->unloadPlugin(tcd->arg_0);


}

::CORBA::Boolean _objref_ServerConfigHandler::unloadPlugin(const char* pluginId)
{
  _0RL_cd_ae81456844cbbeb5_20000000 _call_desc(_0RL_lcfn_ae81456844cbbeb5_30000000, "unloadPlugin", 13);
  _call_desc.arg_0 = pluginId;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cstring_i_cServerConfigHandler_mByteSequence
class _0RL_cd_ae81456844cbbeb5_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ae81456844cbbeb5_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ServerConfigHandler::ByteSequence_var arg_2_;
  const ServerConfigHandler::ByteSequence* arg_2;
  ::CORBA::Boolean result;
};

void _0RL_cd_ae81456844cbbeb5_40000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const ServerConfigHandler::ByteSequence&) *arg_2 >>= _n;

}

void _0RL_cd_ae81456844cbbeb5_40000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new ServerConfigHandler::ByteSequence;
  (ServerConfigHandler::ByteSequence&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

void _0RL_cd_ae81456844cbbeb5_40000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_ae81456844cbbeb5_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_ae81456844cbbeb5_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_ae81456844cbbeb5_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ae81456844cbbeb5_40000000* tcd = (_0RL_cd_ae81456844cbbeb5_40000000*)cd;
  _impl_ServerConfigHandler* impl = (_impl_ServerConfigHandler*) svnt->_ptrToInterface(ServerConfigHandler::_PD_repoId);
  tcd->result = impl->set(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

::CORBA::Boolean _objref_ServerConfigHandler::set(const char* pluginId, const char* propertyName, const ::ServerConfigHandler::ByteSequence& value)
{
  _0RL_cd_ae81456844cbbeb5_40000000 _call_desc(_0RL_lcfn_ae81456844cbbeb5_50000000, "set", 4);
  _call_desc.arg_0 = pluginId;
  _call_desc.arg_1 = propertyName;
  _call_desc.arg_2 = &(::ServerConfigHandler::ByteSequence&) value;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cServerConfigHandler_mByteSequence_i_cstring_i_cstring
class _0RL_cd_ae81456844cbbeb5_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ae81456844cbbeb5_60000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ServerConfigHandler::ByteSequence_var result;
};

void _0RL_cd_ae81456844cbbeb5_60000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_ae81456844cbbeb5_60000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_ae81456844cbbeb5_60000000::marshalReturnedValues(cdrStream& _n)
{
  (const ServerConfigHandler::ByteSequence&) result >>= _n;

}

void _0RL_cd_ae81456844cbbeb5_60000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ServerConfigHandler::ByteSequence;
  (ServerConfigHandler::ByteSequence&)result <<= _n;

}

const char* const _0RL_cd_ae81456844cbbeb5_60000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_ae81456844cbbeb5_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ae81456844cbbeb5_60000000* tcd = (_0RL_cd_ae81456844cbbeb5_60000000*)cd;
  _impl_ServerConfigHandler* impl = (_impl_ServerConfigHandler*) svnt->_ptrToInterface(ServerConfigHandler::_PD_repoId);
  tcd->result = impl->get(tcd->arg_0, tcd->arg_1);


}

ServerConfigHandler::ByteSequence* _objref_ServerConfigHandler::get(const char* pluginId, const char* propertyName)
{
  _0RL_cd_ae81456844cbbeb5_60000000 _call_desc(_0RL_lcfn_ae81456844cbbeb5_70000000, "get", 4);
  _call_desc.arg_0 = pluginId;
  _call_desc.arg_1 = propertyName;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cServerConfigHandler_mByteSequence_i_cstring_i_cstring_i_cServerConfigHandler_mByteSequence
class _0RL_cd_ae81456844cbbeb5_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ae81456844cbbeb5_80000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ServerConfigHandler::ByteSequence_var arg_2_;
  const ServerConfigHandler::ByteSequence* arg_2;
  ServerConfigHandler::ByteSequence_var result;
};

void _0RL_cd_ae81456844cbbeb5_80000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const ServerConfigHandler::ByteSequence&) *arg_2 >>= _n;

}

void _0RL_cd_ae81456844cbbeb5_80000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new ServerConfigHandler::ByteSequence;
  (ServerConfigHandler::ByteSequence&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

void _0RL_cd_ae81456844cbbeb5_80000000::marshalReturnedValues(cdrStream& _n)
{
  (const ServerConfigHandler::ByteSequence&) result >>= _n;

}

void _0RL_cd_ae81456844cbbeb5_80000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ServerConfigHandler::ByteSequence;
  (ServerConfigHandler::ByteSequence&)result <<= _n;

}

const char* const _0RL_cd_ae81456844cbbeb5_80000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_ae81456844cbbeb5_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ae81456844cbbeb5_80000000* tcd = (_0RL_cd_ae81456844cbbeb5_80000000*)cd;
  _impl_ServerConfigHandler* impl = (_impl_ServerConfigHandler*) svnt->_ptrToInterface(ServerConfigHandler::_PD_repoId);
  tcd->result = impl->exec(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

ServerConfigHandler::ByteSequence* _objref_ServerConfigHandler::exec(const char* pluginId, const char* taskName, const ::ServerConfigHandler::ByteSequence& argumentList)
{
  _0RL_cd_ae81456844cbbeb5_80000000 _call_desc(_0RL_lcfn_ae81456844cbbeb5_90000000, "exec", 5);
  _call_desc.arg_0 = pluginId;
  _call_desc.arg_1 = taskName;
  _call_desc.arg_2 = &(::ServerConfigHandler::ByteSequence&) argumentList;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cServerConfigHandler_mStringSequence_i_cstring
class _0RL_cd_ae81456844cbbeb5_a0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ae81456844cbbeb5_a0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ServerConfigHandler::StringSequence_var result;
};

void _0RL_cd_ae81456844cbbeb5_a0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_ae81456844cbbeb5_a0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_ae81456844cbbeb5_a0000000::marshalReturnedValues(cdrStream& _n)
{
  (const ServerConfigHandler::StringSequence&) result >>= _n;

}

void _0RL_cd_ae81456844cbbeb5_a0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ServerConfigHandler::StringSequence;
  (ServerConfigHandler::StringSequence&)result <<= _n;

}

const char* const _0RL_cd_ae81456844cbbeb5_a0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_ae81456844cbbeb5_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ae81456844cbbeb5_a0000000* tcd = (_0RL_cd_ae81456844cbbeb5_a0000000*)cd;
  _impl_ServerConfigHandler* impl = (_impl_ServerConfigHandler*) svnt->_ptrToInterface(ServerConfigHandler::_PD_repoId);
  tcd->result = impl->metaProperties(tcd->arg_0);


}

ServerConfigHandler::StringSequence* _objref_ServerConfigHandler::metaProperties(const char* pluginId)
{
  _0RL_cd_ae81456844cbbeb5_a0000000 _call_desc(_0RL_lcfn_ae81456844cbbeb5_b0000000, "metaProperties", 15);
  _call_desc.arg_0 = pluginId;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_ae81456844cbbeb5_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ae81456844cbbeb5_a0000000* tcd = (_0RL_cd_ae81456844cbbeb5_a0000000*)cd;
  _impl_ServerConfigHandler* impl = (_impl_ServerConfigHandler*) svnt->_ptrToInterface(ServerConfigHandler::_PD_repoId);
  tcd->result = impl->metaTasks(tcd->arg_0);


}

ServerConfigHandler::StringSequence* _objref_ServerConfigHandler::metaTasks(const char* pluginId)
{
  _0RL_cd_ae81456844cbbeb5_a0000000 _call_desc(_0RL_lcfn_ae81456844cbbeb5_c0000000, "metaTasks", 10);
  _call_desc.arg_0 = pluginId;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cstring
class _0RL_cd_ae81456844cbbeb5_d0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ae81456844cbbeb5_d0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var result;
};

void _0RL_cd_ae81456844cbbeb5_d0000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_ae81456844cbbeb5_d0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

const char* const _0RL_cd_ae81456844cbbeb5_d0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_ae81456844cbbeb5_e0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ae81456844cbbeb5_d0000000* tcd = (_0RL_cd_ae81456844cbbeb5_d0000000*)cd;
  _impl_ServerConfigHandler* impl = (_impl_ServerConfigHandler*) svnt->_ptrToInterface(ServerConfigHandler::_PD_repoId);
  tcd->result = impl->lastErrorString();


}

char* _objref_ServerConfigHandler::lastErrorString()
{
  _0RL_cd_ae81456844cbbeb5_d0000000 _call_desc(_0RL_lcfn_ae81456844cbbeb5_e0000000, "lastErrorString", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean
class _0RL_cd_ae81456844cbbeb5_f0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_ae81456844cbbeb5_f0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Boolean result;
};

void _0RL_cd_ae81456844cbbeb5_f0000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_ae81456844cbbeb5_f0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_ae81456844cbbeb5_f0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_ae81456844cbbeb5_01000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_ae81456844cbbeb5_f0000000* tcd = (_0RL_cd_ae81456844cbbeb5_f0000000*)cd;
  _impl_ServerConfigHandler* impl = (_impl_ServerConfigHandler*) svnt->_ptrToInterface(ServerConfigHandler::_PD_repoId);
  tcd->result = impl->hasFailure();


}

::CORBA::Boolean _objref_ServerConfigHandler::hasFailure()
{
  _0RL_cd_ae81456844cbbeb5_f0000000 _call_desc(_0RL_lcfn_ae81456844cbbeb5_01000000, "hasFailure", 11);


  _invoke(_call_desc);
  return _call_desc.result;


}
_pof_ServerConfigHandler::~_pof_ServerConfigHandler() {}


omniObjRef*
_pof_ServerConfigHandler::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::_objref_ServerConfigHandler(ior, id);
}


::CORBA::Boolean
_pof_ServerConfigHandler::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::ServerConfigHandler::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_ServerConfigHandler _the_pof_ServerConfigHandler;

_impl_ServerConfigHandler::~_impl_ServerConfigHandler() {}


::CORBA::Boolean
_impl_ServerConfigHandler::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "loadPlugin") ) {

    _0RL_cd_ae81456844cbbeb5_00000000 _call_desc(_0RL_lcfn_ae81456844cbbeb5_10000000, "loadPlugin", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "unloadPlugin") ) {

    _0RL_cd_ae81456844cbbeb5_20000000 _call_desc(_0RL_lcfn_ae81456844cbbeb5_30000000, "unloadPlugin", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "set") ) {

    _0RL_cd_ae81456844cbbeb5_40000000 _call_desc(_0RL_lcfn_ae81456844cbbeb5_50000000, "set", 4, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "get") ) {

    _0RL_cd_ae81456844cbbeb5_60000000 _call_desc(_0RL_lcfn_ae81456844cbbeb5_70000000, "get", 4, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "exec") ) {

    _0RL_cd_ae81456844cbbeb5_80000000 _call_desc(_0RL_lcfn_ae81456844cbbeb5_90000000, "exec", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "metaProperties") ) {

    _0RL_cd_ae81456844cbbeb5_a0000000 _call_desc(_0RL_lcfn_ae81456844cbbeb5_b0000000, "metaProperties", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "metaTasks") ) {

    _0RL_cd_ae81456844cbbeb5_a0000000 _call_desc(_0RL_lcfn_ae81456844cbbeb5_c0000000, "metaTasks", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "lastErrorString") ) {

    _0RL_cd_ae81456844cbbeb5_d0000000 _call_desc(_0RL_lcfn_ae81456844cbbeb5_e0000000, "lastErrorString", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "hasFailure") ) {

    _0RL_cd_ae81456844cbbeb5_f0000000 _call_desc(_0RL_lcfn_ae81456844cbbeb5_01000000, "hasFailure", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
_impl_ServerConfigHandler::_ptrToInterface(const char* id)
{
  if( id == ::ServerConfigHandler::_PD_repoId )
    return (::_impl_ServerConfigHandler*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::ServerConfigHandler::_PD_repoId) )
    return (::_impl_ServerConfigHandler*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
_impl_ServerConfigHandler::_mostDerivedRepoId()
{
  return ::ServerConfigHandler::_PD_repoId;
}

POA_ServerConfigHandler::~POA_ServerConfigHandler() {}

